class Node:
    def __init__(self,data=None,next=None):
        self.data = data
        self.next = next

class LinkedList:
    def __init__(self):
        self.head=None

    def insert_at_beginning(self,data):
        node=Node(data,self.head)
        self.head=node

    def insert_at_end(self,data):
        if self.head is None:
            # node=Node(data,None)
            # self.head=node
            self.insert_at_beginning(data)
            return
        
        itr = self.head
        # print(str(itr.data),str(itr.next.next))
        while itr.next:
            itr = itr.next

        itr.next = Node(data,None)

    
    def printl(self):
        if self.head is None:
            print("List is blank")
            return
        
        itr = self.head
        llstr=""
        while itr:
            llstr+= str(itr.data) + " ----> "
            itr = itr.next
        print(llstr)

    def insert_values(self,data):
        for dt in data:
            self.insert_at_end(dt)

    def get_length(self):
        count=0
        itr=self.head
        while itr:
            itr=itr.next
            count+=1
        return count

    def remove_at(self,index):
        count=0
        itr=self.head
        if index == 0:
            self.head=itr.next
            return
        while itr:
            if count==index:
                itr.next=itr.next.next
                return
            count+=1
        itr=itr.next

    def insert_at(self,index,data):
        print("---",self.get_length())
        if index < 0 or index > self.get_length():
            raise Exception("Invalid Index")
        if index==0:
            self.insert_at_beginning(data)
            return
        count=0
        itr=self.head
        while itr:
            if count==index-1:
                itr.next=Node(data,itr.next)
                return
            itr=itr.next
            count+=1
    
    def insert_after(self,data,new_data):
        itr = self.head
        while itr:
            if itr.data == data:
                itr.next=Node(new_data,itr.next)
                return
            itr=itr.next

    def remove_value(self,data):
        itr=self.head
        while itr.next: 
            if itr.next.data == data:
                itr.next=itr.next.next
                return
            itr=itr.next

if __name__ == "__main__":
    ll= LinkedList()
    ll.insert_values(["banana","mango","orange","lemon","guava"])
    ll.get_length()
    ll.remove_at(1)
    ll.insert_at(0,"ram")
    ll.insert_after("lemon","lacha lemon")
    ll.remove_value("lacha lemon")
    ll.printl()

