class Node:
    def __init__(self,prev=None,data=None,next=None):
        self.prev=prev
        self.data=data
        self.next=next

class LinkedList:
    def __init__(self):
        self.head=None
        
    def insert_at_begin(self,data):
        if self.head == None:
            node=Node(None,data,self.head)
            self.head=node
        else:
            node=Node(None,data,self.head)
            self.head.prev=node
            self.head=node

    def printforward(self):
        itr=self.head
        llstr=""
        while itr:
            llstr+=str(itr.data)+" --> "
            itr=itr.next
        print(llstr)

    def get_last(self):
        itr=self.head
        while itr.next: 
            itr=itr.next
        return itr

    def printback(self):
        itr=self.get_last()
        llback=""
        while itr:
            llback+=str(itr.data)+" --> "
            itr=itr.prev
        print(llback)

    def get_length(self):
        count=0
        itr=self.head
        while itr:
            itr=itr.next
            count+=1
        return count

    def insert_at_end(self,data):
        if self.head == None:
            self.insert_at_begin(data)
            return
        itr=self.head
        while itr.next:
            itr=itr.next
        itr.next=Node(itr,data,None)

    def insert_values(self,data):
        for x in data:
            self.insert_at_end(x)

    def remove_at(self,index):
        if index < 0 or index > self.get_length():
            raise Exception("Invalid Index")
        count=0
        itr=self.head
        while itr:
            if count==index-1:
                itr.next=itr.next.next
                if itr.next:
                    itr.next.prev=itr
                return
            count+=1
            itr=itr.next

    def insert_at(self,index,data):
        itr=self.head
        count=0
        if index < 0 or index > self.get_length():
            raise Exception("Invalid Index")
        if index==0:
            self.insert_at_begin(data)
        while itr:
            if count==index-1:
                node=Node(itr,data,itr.next)
                if node.next:
                    node.next.prev=node
                itr.next=node
                break
            itr=itr.next
            count+=1

if __name__=="__main__":
    dl=LinkedList()
    dl.insert_at_end(54)
    dl.insert_at_begin(23)
    dl.insert_at_end(88)
    dl.insert_at_begin(24)
    dl.insert_values(["ra","la"])
    dl.remove_at(5)
    dl.insert_at(2,"check")
    dl.printforward()
    dl.printback()
    print(dl.get_length())
